// Generated by CoffeeScript 1.4.0
(function() {
  var Game, Obstacle, btn, game, images, message_end, message_start, overlay, preload_assets, sounds, start_game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  preload_assets = function(callback) {
    var ii, img_name, img_url, num_loaded,
      _this = this;
    num_loaded = Object.keys(images).length + Object.keys(sounds).length;
    for (img_name in images) {
      img_url = images[img_name];
      ii = new Image();
      ii.onload = function() {
        num_loaded--;
        if (num_loaded === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
      };
      ii.src = img_url;
    }
    return atom.preloadSounds(sounds, function() {
      num_loaded -= Object.keys(sounds).length;
      if (num_loaded === 0) {
        return typeof callback === "function" ? callback() : void 0;
      }
    });
  };

  atom.canvasAR = 1;

  images = {
    skis: 'assets/skis.png',
    kn: 'assets/k+n.png',
    z: 'assets/z.png',
    cone: 'assets/cone.png',
    tree: 'assets/tree.png',
    sasha: 'assets/sasha.png',
    backdrop: 'assets/backdrop.jpg'
  };

  sounds = {
    ouch: 'assets/ouch.wav'
  };

  overlay = $('#overlay');

  message_start = $('#game-start');

  message_end = $('#game-end');

  btn = $('#button');

  game = null;

  atom.resizeCb = function() {
    if (game != null) {
      game.refresh_view();
    }
    overlay.width(atom.width);
    overlay.height(atom.height);
    return overlay.css({
      left: $('#game').offset().left,
      top: $('#game').offset().top
    });
  };

  window.onresize();

  start_game = function() {
    game.reset();
    message_start.hide();
    overlay.hide();
    window.onblur = function() {
      return game.stop();
    };
    window.onfocus = function() {
      return game.run();
    };
    return game.run();
  };

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      var i, o, _, _i, _j, _len, _ref,
        _this = this;
      Game.__super__.constructor.apply(this, arguments);
      this.DF = 0.5;
      this.HF = 0.5;
      this.DG = 0.5;
      this.L = 10;
      this.RW = 4;
      this.RW2 = this.RW / 2.0;
      this.SKI_WIDTH = this.RW / 20.0;
      this.MAXXSPEED = 5;
      this.XACC = 1;
      this.XFRICTION = .5;
      this.OBS_FREQ = 5;
      this.CONE_HEIGHT = .8;
      this.CONE_WIDTH = .6;
      this.LIFE_INCREASE_SPEED = .001;
      this.COLLISION_PRICE = 0.25;
      this.OBS_IMGS = ['kn', 'z', 'cone', 'sasha', 'tree'];
      this.OBS_WEIGHTS = [1, 1, 10, 1, 5];
      this.OBS_BINS = [];
      _ref = this.OBS_WEIGHTS;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        o = _ref[i];
        for (_ = _j = 0; 0 <= o ? _j < o : _j > o; _ = 0 <= o ? ++_j : --_j) {
          this.OBS_BINS.push(this.OBS_IMGS[i]);
        }
      }
      atom.input.bind(atom.key.LEFT_ARROW, 'left');
      atom.input.bind(atom.key.RIGHT_ARROW, 'right');
      atom.input.bind(atom.key.DOWN_ARROW, 'down');
      atom.input.bind(atom.key.UP_ARROW, 'up');
      this._draw_backdrop();
      this.runway = new fabric.Polyline([
        {
          x: 1,
          y: 2
        }, {
          x: 100,
          y: 200
        }, {
          x: 887,
          y: 777
        }
      ], {
        stroke: '#00f',
        fill: '#fff'
      }, false);
      atom.canvas.add(this.runway);
      fabric.Image.fromURL(images.skis, function(oImg) {
        _this.skis = oImg;
        _this.skis.scaleToWidth(atom.width * _this.SKI_WIDTH);
        _this.skis.set({
          left: atom.width / 2.0,
          top: atom.height - atom.height * 0.05
        });
        return atom.canvas.add(_this.skis);
      });
      this.lifebar = new fabric.Rect({
        fill: '#f00',
        strokeWidth: 0
      });
      this.lifebar_shell = new fabric.Rect({
        stroke: '#000',
        strokeWidth: 2,
        fill: "rgba(0,0,0,0)"
      });
      atom.canvas.add(this.lifebar);
      atom.canvas.add(this.lifebar_shell);
      this.lifebar_shell.set({
        top: atom.height / 25,
        left: atom.width - atom.width / 10,
        height: atom.height / 50,
        width: atom.width / 8
      });
      this.points_text = new fabric.Text('points: 0', {
        left: atom.width / 10,
        top: atom.height / 25,
        fontSize: atom.height / 40,
        fontWeight: "bold",
        fontFamily: "sans-serif",
        textAlign: "left"
      });
      atom.canvas.add(this.points_text);
      this.dx = 0.0;
      this.obstacles = [];
      this.time_since_last_obs = 0;
      this.time_to_next_obs = 0;
      this.life = 1.0;
      this.points = 0;
      this.time = 0;
      this.xspeed = 0;
      this.speedup = false;
    }

    Game.prototype.update = function(dt) {
      var o, to_remove, type, _i, _len, _ref;
      if (atom.input.down('left')) {
        this.xspeed = Math.max(-this.MAXXSPEED, this.xspeed - this.XACC);
      } else if (atom.input.down('right')) {
        this.xspeed = Math.min(this.MAXXSPEED, this.xspeed + this.XACC);
      } else {
        if (this.xspeed > 0) {
          this.xspeed = Math.max(0, this.xspeed - this.XFRICTION);
        } else {
          this.xspeed = Math.min(0, this.xspeed + this.XFRICTION);
        }
      }
      this.dx = Math.max(-this.RW2 + this.SKI_WIDTH / 2, Math.min(this.RW2 - this.SKI_WIDTH / 2, this.dx + dt * this.xspeed));
      if ((this.dx > 0 && Math.abs(this.dx - this.RW2 + this.SKI_WIDTH / 2) < 0.0001) || (this.dx < 0 && Math.abs(-this.dx - this.RW2 + this.SKI_WIDTH / 2) < 0.0001)) {
        this.xspeed = 0;
      }
      if (atom.input.down('up')) {
        this.speedup = true;
        this.points += 2 * dt;
        console.log("speedup");
      } else {
        this.speedup = false;
        this.points += dt;
      }
      this.time += dt;
      to_remove = [];
      _ref = this.obstacles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        o.update(dt);
        if (o.is_colliding() || o.is_off_screen()) {
          o.remove_from_canvas();
          to_remove.push(o);
          if (o.is_colliding()) {
            this.life -= this.COLLISION_PRICE;
            atom.playSound('ouch');
          }
        }
      }
      this.life = Math.min(1.0, this.life + this.LIFE_INCREASE_SPEED);
      if (this.life < 0) {
        this.game_over();
      }
      this.obstacles = this.obstacles.filter(function(o) {
        return !(__indexOf.call(to_remove, o) >= 0);
      });
      if (this.time_to_next_obs < this.time_since_last_obs) {
        type = this.OBS_BINS[Math.floor(Math.random() * this.OBS_BINS.length)];
        this.obstacles.unshift(new Obstacle(this, this.CONE_HEIGHT, this._random_x_loc(this.CONE_WIDTH), type));
        this.time_since_last_obs = 0;
        return this.time_to_next_obs = Math.random() / this.get_speed();
      } else {
        return this.time_since_last_obs += dt;
      }
    };

    Game.prototype.draw = function() {
      var o, points, _i, _len, _ref, _ref1;
      points = [
        {
          x: this._calc_x(-this.RW2, 0),
          y: this._calc_y(0, 0)
        }, {
          x: this._calc_x(this.RW2, 0),
          y: this._calc_y(0, 0)
        }, {
          x: this._calc_x(this.RW2, this.L),
          y: this._calc_y(0, this.L)
        }, {
          x: this._calc_x(-this.RW2, this.L),
          y: this._calc_y(0, this.L)
        }, {
          x: this._calc_x(-this.RW2, 0),
          y: this._calc_y(0, 0)
        }
      ];
      this.runway.set({
        points: points
      });
      _ref = this.obstacles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        o.draw();
      }
      if ((_ref1 = this.skis) != null) {
        _ref1.bringToFront();
      }
      this.lifebar.set({
        top: atom.height / 25,
        left: atom.width - atom.width / 10 - atom.width / 16 * (1 - this.life),
        height: atom.height / 50,
        width: atom.width / 8 * this.life
      });
      this.lifebar_shell.bringToFront();
      this.lifebar.bringToFront();
      this.points_text.set('text', "points: " + (Math.round(this.points)));
      return atom.canvas.renderAll();
    };

    Game.prototype._calc_y = function(oy, od, convert) {
      var y;
      if (convert == null) {
        convert = true;
      }
      y = (this.HF - oy) * this.DF / (this.DG + od) + this.HF;
      if (convert) {
        return this._sy(y);
      } else {
        return y;
      }
    };

    Game.prototype._calc_x = function(ox, od, convert) {
      var x;
      if (convert == null) {
        convert = true;
      }
      x = (-this.dx + ox) * this.DF / (this.DG + od) + 0.5;
      if (convert) {
        return this._sx(x);
      } else {
        return x;
      }
    };

    Game.prototype._sx = function(x) {
      return x * atom.width;
    };

    Game.prototype._sy = function(y) {
      return y * atom.width;
    };

    Game.prototype._random_x_loc = function(width) {
      if (Math.random() < 0.7) {
        return Math.random() * (this.RW - width) - this.RW2 + width / 2.0;
      } else {
        return this.dx;
      }
    };

    Game.prototype._draw_backdrop = function() {
      var _adjust_backdrop,
        _this = this;
      _adjust_backdrop = function(bd) {
        bd.set({
          left: atom.width / 2.0,
          top: atom.height / 2.0
        });
        bd.sendToBack();
        return bd.scaleToHeight(atom.height);
      };
      if (this.backdrop != null) {
        return _adjust_backdrop(this.backdrop);
      } else {
        return fabric.Image.fromURL(images.backdrop, function(oImg) {
          _this.backdrop = oImg;
          atom.canvas.add(_this.backdrop);
          return _adjust_backdrop(_this.backdrop);
        });
      }
    };

    Game.prototype.get_speed = function() {
      var s;
      s = Math.max(1, this.time / 25);
      if (this.speedup) {
        return s * 3;
      } else {
        return s;
      }
    };

    Game.prototype.refresh_view = function() {
      var _ref, _ref1;
      this._draw_backdrop();
      if ((_ref = this.skis) != null) {
        _ref.scaleToWidth(atom.width * this.SKI_WIDTH);
      }
      if ((_ref1 = this.skis) != null) {
        _ref1.set({
          left: atom.width / 2.0,
          top: atom.height - atom.height * 0.05
        });
      }
      this.lifebar_shell.set({
        top: atom.height / 25,
        left: atom.width - atom.width / 10,
        height: atom.height / 50,
        width: atom.width / 8
      });
      this.points_text.set({
        left: atom.width / 10,
        top: atom.height / 25,
        fontSize: atom.height / 40
      });
      return this.draw();
    };

    Game.prototype.reset = function() {
      var o, _i, _len, _ref;
      this.life = 1;
      this.points = 0;
      _ref = this.obstacles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        o.remove_from_canvas();
      }
      this.obstacles = [];
      this.dx = 0;
      return this.xspeed = 0;
    };

    Game.prototype.game_over = function() {
      this.life = 0;
      this.stop();
      window.onfocus = null;
      message_start.hide();
      message_end.html("You got " + (Math.round(this.points)) + " points, but then you lost :(");
      message_end.show();
      btn.html('Play again!');
      btn.show();
      btn.on('click', start_game);
      return overlay.show();
    };

    return Game;

  })(atom.Game);

  Obstacle = (function() {

    Obstacle.counter = 0;

    function Obstacle(game, h, x, type) {
      var _this = this;
      this.game = game;
      this.h = h;
      this.x = x;
      this.type = type;
      this.d = this.game.L;
      fabric.Image.fromURL(images[this.type], function(oImg) {
        _this.shape = oImg;
        if (_this.game.running) {
          atom.canvas.add(_this.shape);
          return _this.draw();
        }
      });
      this.id = Obstacle.counter++;
    }

    Obstacle.prototype.draw = function() {
      if (!(this.shape != null)) {
        return;
      }
      this.shape.set({
        left: this.game._calc_x(this.x, this.d),
        top: this.game._calc_y(this.h / 2.0, this.d)
      });
      return this.shape.scaleToHeight(this.game._calc_y(0, this.d) - this.game._calc_y(this.h, this.d));
    };

    Obstacle.prototype.update = function(dt) {
      if (!(this.shape != null)) {
        return;
      }
      this.d -= this.game.get_speed() * dt;
      return this.shape.bringToFront();
    };

    Obstacle.prototype.is_colliding = function() {
      return this.d < .1 && Math.abs(this.game.dx - this.x) <= this.game.SKI_WIDTH;
    };

    Obstacle.prototype.is_off_screen = function() {
      return this.d <= 0;
    };

    Obstacle.prototype.remove_from_canvas = function() {
      return atom.canvas.remove(this.shape);
    };

    return Obstacle;

  })();

  $(document).ready(function() {
    overlay.show();
    btn.hide();
    message_start.hide();
    message_end.html("Loading game...");
    message_end.show();
    return preload_assets(function() {
      game = new Game;
      game.draw();
      btn.html('Start game!');
      btn.show();
      btn.on('click', start_game);
      message_start.show();
      return message_end.hide();
    });
  });

}).call(this);
